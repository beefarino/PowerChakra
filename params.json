{"name":"Powerchakra","tagline":"PowerChakra. MS's JavaScript Engine hosted inside PowerShell. This Project will Host MS's Chakra Javascript Engine inside of PowerShell, providing Cmdlets to execute arbitary Javascript, Javascript Functions from within PowerShell.","body":"# PowerChakra. MS's JavaScript Engine hosted inside PowerShell.\r\n\r\nThis Project will Host MS's Chakra Javascript Engine inside of PowerShell, providing Cmdlets to execute arbitary Javascript, Javascript Functions from within PowerShell.\r\n\r\n##Goals\r\n* Run Arbitary JS from within PowerShell.\r\n* Ability to have JSSessions so you can have more than one JS runtime active at a time.\r\n    * get-JSSession -> list in the session in the environment. (or get a specific one).\r\n    * New-JSSession -> ability to create a JS runtime environment with various options.\r\n    * Remove-JSSesson -> remove a JS runtime environment.\r\n* Load JS files into a JSSession.\r\n* Load JS files.\r\n* Run JS functions from PS, passing in properties.\r\n* return JS results to PowerShell.\r\n* Get-JSfunction -session X : List functions in a JS session (possibly in the future a provider).\r\n* Get-JSVariable -Session X : List (or get a specific) variable from JS session.\r\n* Set-JSVariable -Session X : sets the value of a JS var.\r\n* Variables , Results and Arguments.\r\n    * transform compatible types automatically (i.e string, bool, int, double (depending on number in JS \r\n      ), null etc.\r\n    * ability to provide transformation functions.\r\n    * other objects on the way in get transformed into JSON, and on the way out can come as JSON, or get     \r\n      transformed to PSCustomObjects.\r\n* Invoke-JS - main way to run JS\r\n    * a way to invoke it simply where a session is created and destroyed at the end.\r\n    * ability to create a new session with this.\r\n    * ability to run code without returning any values.\r\n    * ability to take in PS arguments, and pass them (and if needed transform them).\r\n    * ability to return results as correct PS types, or JSON or PScustomObject.\r\n* Invoke-JSfunction -Name ... -Session -Arguments : Ability to call a JS function in a session.\r\n* New-JSproxy - Ability to take a JS function (or functions) and generate a PS wrapper.\r\n\r\n##MidTerm Goals\r\n* Call Back to PowerShell.\r\n* Access PS variables from within JS.\r\n* Ability to submit PS events.\r\n* various package distributions (Joels, Chocolatey , Nuget)\r\n* CoffeeScript and TypeScript support (include those libraries automatically, and functions that will parse,compile,and execute them)\r\n\r\n##Non-Goals\r\n* any WebServer or trying to be Node.JS.\r\n\r\n##Possible Future Scope\r\n* Enter-JSSession - basically a Javascript REPL interface not too unlike Node.JS \r\n* Start-JSJob - aysnc sessions that work like jobs. working behind the scenes, either it will plug\r\n  into the PSJob framework with | Wait-job and Receive-Job or at least work in a consistant manner. (Wait-JSJob , Receive-JSJob).\r\n* Object to do Ajax calls.\r\n\r\n#Examples\r\n\r\n\t ipmo PowerChakra -Force\r\n\t \r\n\t #invoke a simple expression\r\n\t invoke-js \"5+5\"\r\n\t \r\n\t New-JSSession -Name test\r\n\t #invoke an expression, in a session, and DON'T RETURN RESULTS\r\n\t Invoke-JS -Name test -Script \"var x = 5; function add(y){return y+y}\" -NoResults\r\n\t #reuse the session, running a function previously applied AND return results.\r\n\t Invoke-JS -Name test -Script \"add(x,10)\"\r\n\r\n\t #create a nested PS object\r\n\t invoke-JS -Name test -Script \"var ourobj = {name : 'PowerChakra', numbers : [1,2,3] , something: { x:1}  }\" -NoResults\r\n\t #get object as JSON, then convert to PS object \r\n\t $objectasJSON = invoke-JS -Name test -Script \"JSON.stringify(ourobj)\"\r\n\t $objectasJSON \r\n\t $objectasPSobj = ConvertFrom-Json $objectasJSON\r\n\t $objectasPSobj | fl\r\n \r\n\r\n#Installation\r\nTODO:\r\n\r\n###Random Notes\r\nSessionID and Name\r\nCall backs\r\nJS exceptions.\r\n\r\n\r\n# License\r\n\r\n(C) 2013 ShellTools LLC. Released under [Microsoft Public License (Ms-PL)](https://github.com/klumsy/PowerChakra/blob/master/LICENSE.md)\r\n\r\nThe .Net Javascript Wrapper is derived from [MSieJavaScriptEngine]\r\n(http://github.com/Taritsyn/MsieJavaScriptEngine)\r\n[Microsoft Public License (Ms-PL)](http://github.com/Taritsyn/MsieJavaScriptEngine/blob/master/LICENSE.md)\r\n\r\n# Credits\r\n* [MSieJavaScriptEngine](http://github.com/Taritsyn/MsieJavaScriptEngine) - [License: Microsoft Public License (Ms-PL)](http://github.com/Taritsyn/MsieJavaScriptEngine/blob/master/LICENSE.md) Part of the code of this library served as the .Net library powering PowerChakra.\r\n* [SassAndCoffee.JavaScript](http://github.com/xpaulbettsx/SassAndCoffee) - [License: Microsoft Public License (Ms-PL)](http://github.com/xpaulbettsx/SassAndCoffee/blob/master/COPYING) Part of the code of this library served as the basis for MSIE JS Engine.\r\n* [ECMAScript 5 Polyfill](http://nuget.org/packages/ES5) - Adds support for many of the new functions in ECMAScript 5 to downlevel browsers using the samples provided by Douglas Crockford in his [\"ECMAScript 5: The New Parts\"](http://channel9.msdn.com/Events/MIX/MIX11/EXT13) talk.\r\n* [JSON2 library](http://github.com/douglascrockford/JSON-js) - Adds support of the JSON object from ECMAScript 5 to downlevel browsers.\r\n* [Microsoft Ajax Minifier](http://ajaxmin.codeplex.com/) - [License: Apache License 2.0 (Apache)](http://ajaxmin.codeplex.com/license) JS-files, that used MSIE JS Engine, minificated by using ajaxmin.exe.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}